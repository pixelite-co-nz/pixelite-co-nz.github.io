<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule"
    xmlns:cc="http://web.resource.org/cc/">
  <channel>
    <title>Pixelite</title>
    <description>A technology blog or rant area depending on the topic</description>
    <link>http://www.pixelite.co.nz/</link>
    <atom:link href="http://www.pixelite.co.nz/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 31 Aug 2015 23:41:35 +1200</pubDate>
    <lastBuildDate>Mon, 31 Aug 2015 23:41:35 +1200</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Starter regression test suite powered by CasperJS</title>
        <description>&lt;p&gt;I have written about &lt;a href=&quot;/article/why-i-use-casperjs-regression-testing-web-applications&quot;&gt;CasperJS&lt;/a&gt; in the past, and find it very useful for automating what is normally done by real people. This frees up people to do other things, like making your website more awesome.&lt;/p&gt;

&lt;p&gt;A common question I get asked is &lt;strong&gt;how do I get started with CasperJS?&lt;/strong&gt; - this blog post hopes to help everyone get over that initial hurdle, and start writing tests in less than 15 minutes.&lt;/p&gt;

&lt;h2 id=&quot;starter-framework&quot;&gt;Starter framework&lt;/h2&gt;

&lt;p&gt;So I decided to write a generic framework for websites (CMS agnostic), that anyone can fork and make their own. The code is hosted at &lt;a href=&quot;https://github.com/seanhamlin/education-smoke-test&quot;&gt;https://github.com/seanhamlin/education-smoke-test&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;p&gt;Current feature set includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Environment aware&lt;/strong&gt; testing, you can easily switch between your test and production site (this is easily extended as well)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Logs to XML&lt;/strong&gt; (junit compatible) so you can use this with Jenkins for instance&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cache busting&lt;/strong&gt; query parameter to all page requests, to ensure you bypass your reverse proxy (Akamai, Varnish etc)&lt;/li&gt;
  &lt;li&gt;Optional &lt;strong&gt;debug flag&lt;/strong&gt; for more look into CasperJS’s internals&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;jQuery 2.1.4&lt;/strong&gt; for simple remote DOM testing - if you can write jQuery to return a boolean, string or integer you can write a CasperJS test for it&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ignores Google Analytics&lt;/strong&gt;, so CasperJS does not show up in your statistics (can be extended for other analytics providers as well)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Takes a screenshot on fail&lt;/strong&gt; so you can better debug the fail&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fails on JavaScript errors&lt;/strong&gt; in the remote DOM&lt;/li&gt;
  &lt;li&gt;Abstracts common page tests into &lt;code&gt;globalPageTests()&lt;/code&gt;, this enables easy recycling of common tests (e.g. header, footer, HTTP headers etc)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tests are structured&lt;/strong&gt; in a folder, so new tests can be added simply (e.g. for other landing pages)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The github &lt;a href=&quot;https://github.com/seanhamlin/education-smoke-test/blob/master/README.md&quot;&gt;README&lt;/a&gt; goes into more detail on how to install and use the above features.&lt;/p&gt;

&lt;h2 id=&quot;see-it-in-action&quot;&gt;See it in action&lt;/h2&gt;

&lt;p&gt;Here is the output from the test suite as it presently stands:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seanhamlin/education-smoke-test/master/images/example-run.png&quot; alt=&quot;Output from the test suite showing green success passes&quot; class=&quot;img-responsive img-thumbnail&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;p&gt;I am keen to see what other people think about this, and what other features/improvements I could add to it. Please leave my a comment down below, or send me a pull request on github.&lt;/p&gt;
</description>
        <creativeCommons:license>http://creativecommons.org/licenses/by-nc/4.0/</creativeCommons:license>
        <pubDate>Fri, 10 Jul 2015 00:00:00 +1200</pubDate>
        <link>http://www.pixelite.co.nz/article/starter-regression-test-suite-powered-by-casperjs/</link>
        <guid isPermaLink="true">http://www.pixelite.co.nz/article/starter-regression-test-suite-powered-by-casperjs/</guid>
        
        <category>casperjs</category>
        
        <category>testing</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Using Snap.svg for rich interactivity</title>
        <description>&lt;h2 id=&quot;what-is-snapsvg&quot;&gt;What is Snap.svg?&lt;/h2&gt;

&lt;p&gt;Snap.svg (Snap) is a modern javascript library that allows developers to interact with Scalable vector graphics (or &lt;a href=&quot;https://en.wikipedia.org/wiki/Scalable_Vector_Graphics&quot;&gt;svg&lt;/a&gt;). According to the &lt;a href=&quot;http://snapsvg.io/&quot;&gt;website&lt;/a&gt;. Snap is…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… a brand new JavaScript library for working with SVG. Snap provides web developers with a clean, streamlined, intuitive, and powerful API for animating and manipulating both existing SVG content, and SVG content generated with Snap.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Snap is designed to be a modern replacement for the likes of &lt;a href=&quot;http://raphaeljs.com/&quot;&gt;Raphael&lt;/a&gt;. Instead of focusing on compatibility with the older browsers like Internet Explorer 6, Snap instead drops support for older browsers in favor of a more complete SVG feature set.&lt;/p&gt;

&lt;h2 id=&quot;a-nondescript-mustachioed-figure&quot;&gt;A nondescript mustachioed figure&lt;/h2&gt;

&lt;p&gt;I’ll show how I made this basic interactive. (If you want to know how I made the &lt;a href=&quot;/img/mario.svg&quot;&gt;source SVG&lt;/a&gt; file, let me know, I’ll do up a tutorial for that if there’s interest)&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;inline&quot;&gt;
    &lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/snap.svg/0.2.0/snap.svg-min.js&quot;&gt;&lt;/script&gt;

    &lt;script type=&quot;application/javascript&quot;&gt;
        $(function() {
            var s1 = Snap(&quot;#svg&quot;);

            Snap.load(&quot;/img/mario.svg&quot;, function(f) {
                var layer0 = f.select(&quot;#mario&quot;);
                var original_size = 40;
                var hover_size = 24;
                var animation_time = 250;

                $.each(layer0.selectAll(&quot;rect&quot;).items, function() {

                    this.attr({
                       origX:  this.attr(&#39;x&#39;),
                       origY:  this.attr(&#39;y&#39;),
                       modX:  parseInt(this.attr(&#39;x&#39;)) + ((original_size-hover_size)/2),
                       modY:  parseInt(this.attr(&#39;y&#39;)) + ((original_size-hover_size)/2)
                    });

                    this.mouseover(function() {
                        this.animate({
                            x: parseInt(this.attr(&#39;modX&#39;)),
                            y: parseInt(this.attr(&#39;modY&#39;)),
                            width: hover_size,
                            height: hover_size
                        }, animation_time, mina.bounce);
                    }).mouseout(function() {
                        this.stop();
                        this.animate({
                            x: parseInt(this.attr(&#39;origX&#39;)),
                            y: parseInt(this.attr(&#39;origY&#39;)),
                            width: original_size,
                            height: original_size
                        }, animation_time*5, mina.bounce);
                    }).click(function() {
                        alert(&#39;The RECT with the ID: &quot;&#39; + this.attr(&#39;id&#39;) + &#39;&quot;, has the style attributes &quot;&#39; + this.attr(&#39;style&#39;) + &#39;&quot;&#39;);
                    });
                });
                s1.append(layer0);
            });

        });
    &lt;/script&gt;
    &lt;svg id=&quot;svg&quot; viewbox=&quot;0 0 640 640&quot; preserveaspectratio=&quot;xMinYMin meet&quot;&gt;&lt;/svg&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;While this interactive doesn’t have a whole lot of real-world practicality, it does have the core functionality you’d need when making your own interactive website elements.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Loading an external SVG file&lt;/li&gt;
  &lt;li&gt;Element selection&lt;/li&gt;
  &lt;li&gt;Setting element attributes&lt;/li&gt;
  &lt;li&gt;Binding user events&lt;/li&gt;
  &lt;li&gt;Basic animation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-setup&quot;&gt;The setup&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;//cdnjs.cloudflare.com/ajax/libs/snap.svg/0.2.0/snap.svg-min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;application/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// This is the Snap.svg object, It&amp;#39;s an existing node in our DOM.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Snap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#svg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// this is where the main body of our code will go, for the rest of&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// the tutorial I&amp;#39;ll just display the code that goes here.&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;svg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;svg&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we just load the required Snap library and create a new Snap object. I am also loading jQuery, however this isn’t required, I am just lazy and am using it for brevity.&lt;/p&gt;

&lt;h2 id=&quot;loading&quot;&gt;Loading…&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Snap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#svg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Snap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/img/mario.svg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// #mario is a layer group node within the SVG file&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// this contains all of the svg elements we want to load.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;layer0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#mario&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layer0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The function &lt;code&gt;Snap.load(FILENAME, CALLBACK)&lt;/code&gt; loads the &lt;code&gt;FILENAME&lt;/code&gt; and passes it to the &lt;code&gt;CALLBACK&lt;/code&gt; function as a Snap object. We then use the Snap selector &lt;code&gt;select(SELECTOR)&lt;/code&gt; to grab the group with the &lt;code&gt;ID&lt;/code&gt; &lt;strong&gt;mario&lt;/strong&gt;. &lt;code&gt;s1.append(layer0);&lt;/code&gt; adds the mario group to the &lt;code&gt;&amp;lt;SVG&amp;gt;&lt;/code&gt; tag in the DOM. We get the following.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;inline&quot;&gt;
    &lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/snap.svg/0.2.0/snap.svg-min.js&quot;&gt;&lt;/script&gt;

    &lt;script type=&quot;application/javascript&quot;&gt;
        $(function() {
            var s1 = Snap(&quot;#svg1&quot;);

            Snap.load(&quot;/img/mario.svg&quot;, function(f) {
                var layer0 = f.select(&quot;#mario&quot;);

                s1.append(layer0);
            });

        });
    &lt;/script&gt;
    &lt;svg id=&quot;svg1&quot; viewbox=&quot;0 0 640 640&quot; preserveaspectratio=&quot;xMinYMin meet&quot;&gt;&lt;/svg&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;please-select-player&quot;&gt;Please select player&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;layer0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#mario&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layer0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;rect&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;origX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;origY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We use the &lt;code&gt;selectAll()&lt;/code&gt; function on our loaded layer to find all the &lt;code&gt;RECT&lt;/code&gt; objects (all the “pixels” in the &lt;a href=&quot;/img/mario.svg&quot;&gt;source SVG&lt;/a&gt; are &lt;code&gt;RECT&lt;/code&gt; nodes.) We can set some attributes on these nodes using the &lt;code&gt;attr()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Here we are also setting some attributes (&lt;code&gt;origX/Y&lt;/code&gt;) that we’ll use when we apply animation.&lt;/p&gt;

&lt;h2 id=&quot;its-dangerous-to-go-alone&quot;&gt;It’s dangerous to go alone&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layer0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;rect&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;origX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;origY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;The RECT with the ID: &amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;, has the style attributes &amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;style&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What we’ve done here is bind a click event to each of the pixels which will pop up a javascript alert and display the ID and &lt;code&gt;style=&quot;&quot;&lt;/code&gt; attributes for that node. Try clicking on the pixels below.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;inline&quot;&gt;
    &lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/snap.svg/0.2.0/snap.svg-min.js&quot;&gt;&lt;/script&gt;

    &lt;script type=&quot;application/javascript&quot;&gt;
        $(function() {
            var s1 = Snap(&quot;#svg2&quot;);
            Snap.load(&quot;/img/mario.svg&quot;, function(f) {
                var layer0 = f.select(&quot;#mario&quot;);
                var original_size = 40;
                var hover_size = 24;
                var animation_time = 250;

                $.each(layer0.selectAll(&quot;rect&quot;).items, function() {

                    this.attr({
                       origX:  this.attr(&#39;x&#39;),
                       origY:  this.attr(&#39;y&#39;),
                    });

                    this.click(function() {
                        alert(&#39;The RECT with the ID: &quot;&#39; + this.attr(&#39;id&#39;) + &#39;&quot;, has the style attributes &quot;&#39; + this.attr(&#39;style&#39;) + &#39;&quot;&#39;);
                    });
                });

                s1.append(layer0);
            });

        });
    &lt;/script&gt;
    &lt;svg id=&quot;svg2&quot; viewbox=&quot;0 0 640 640&quot; preserveaspectratio=&quot;xMinYMin meet&quot;&gt;&lt;/svg&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;da-da-daa-da-daa-da-huh&quot;&gt;Da da daa da daa DA! (huh?!?)&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Snap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#svg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Snap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/img/mario.svg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;layer0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#mario&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;original_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hover_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;animation_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layer0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;rect&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;origX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;origY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;modX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;original_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hover_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;modY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;original_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hover_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mouseover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;modX&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;modY&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hover_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hover_size&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;animation_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mina&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bounce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mouseout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;origX&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;origY&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;original_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;original_size&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;animation_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mina&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bounce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;The RECT with the ID: &amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;, has the style attributes &amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;style&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layer0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we’ve set some variables, &lt;code&gt;hover_size&lt;/code&gt;, &lt;code&gt;original_size&lt;/code&gt;  and &lt;code&gt;animation_time&lt;/code&gt;. We also set some attributes &lt;code&gt;modX/Y&lt;/code&gt; which are the X and Y co-ords of where we want each pixel to animate to on &lt;code&gt;mouseover&lt;/code&gt;. &lt;code&gt;origX/Y&lt;/code&gt; are the original X and Y co-ords. We store this so that we have the values to animate backwards after &lt;code&gt;mouseout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;animate()&lt;/code&gt; takes an object of attributes we want to animate, the length of the animation and finally the easing method. Snap uses &lt;a href=&quot;http://snapsvg.io/docs/#mina&quot;&gt;mina&lt;/a&gt;, and there are half a dozen or so easing methods. They all have their time and place.&lt;/p&gt;

&lt;p&gt;Once we run all this we get our original Mario interactive.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;inline&quot;&gt;
    &lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/snap.svg/0.2.0/snap.svg-min.js&quot;&gt;&lt;/script&gt;

    &lt;script type=&quot;application/javascript&quot;&gt;
        $(function() {
            var s1 = Snap(&quot;#svg3&quot;);
            Snap.load(&quot;/img/mario.svg&quot;, function(f) {
                var layer0 = f.select(&quot;#mario&quot;);
                var original_size = 40;
                var hover_size = 24;
                var animation_time = 250;

                $.each(layer0.selectAll(&quot;rect&quot;).items, function() {
                    this.attr({
                       origX:  this.attr(&#39;x&#39;),
                       origY:  this.attr(&#39;y&#39;),
                       modX:  parseInt(this.attr(&#39;x&#39;)) + ((original_size-hover_size)/2),
                       modY:  parseInt(this.attr(&#39;y&#39;)) + ((original_size-hover_size)/2)
                    });

                    this.mouseover(function() {
                        this.animate({
                            x: parseInt(this.attr(&#39;modX&#39;)),
                            y: parseInt(this.attr(&#39;modY&#39;)),
                            width: hover_size,
                            height: hover_size
                        }, animation_time, mina.bounce);
                    }).mouseout(function() {
                        this.stop();
                        this.animate({
                            x: parseInt(this.attr(&#39;origX&#39;)),
                            y: parseInt(this.attr(&#39;origY&#39;)),
                            width: original_size,
                            height: original_size
                        }, animation_time*5, mina.bounce);
                    }).click(function() {
                        alert(&#39;The RECT with the ID: &quot;&#39; + this.attr(&#39;id&#39;) + &#39;&quot;, has the style attributes &quot;&#39; + this.attr(&#39;style&#39;) + &#39;&quot;&#39;);
                    });
                });

                s1.append(layer0);
            });

        });
    &lt;/script&gt;
    &lt;svg id=&quot;svg3&quot; viewbox=&quot;0 0 640 640&quot; preserveaspectratio=&quot;xMinYMin meet&quot;&gt;&lt;/svg&gt;
&lt;/div&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;our-princess-is-in-another-castle&quot;&gt;Our princess is in another castle&lt;/h2&gt;

&lt;p&gt;As stated earlier, this interactive doesn’t really have a lot of practicality, but hopefully from the info I’ve provided you will be able to imagine useful and unique interactive elements to embed into your websites. The examples provided should illustrate to you the basics of what you can do with Snap.svg.&lt;/p&gt;

&lt;p&gt;If you have any questions, or want me to cover any particular section in depth. Leave a comment below and I’ll do my best.&lt;/p&gt;

&lt;p&gt;You can download the sourcecode for the interactive here &lt;a href=&quot;/img/example.tar.gz&quot;&gt;example.tar.gz&lt;/a&gt;&lt;/p&gt;

</description>
        <creativeCommons:license>http://creativecommons.org/licenses/by-nc/4.0/</creativeCommons:license>
        <pubDate>Thu, 02 Jul 2015 00:00:00 +1200</pubDate>
        <link>http://www.pixelite.co.nz/article/using-snap-svg-for-rich-interactivity</link>
        <guid isPermaLink="true">http://www.pixelite.co.nz/article/using-snap-svg-for-rich-interactivity</guid>
        
        <category>svg</category>
        
        <category>graphics</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Debugging Drupal performance with Cache Debug module</title>
        <description>&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;
&lt;p&gt;This blog post is for developers, not site builders, as the analysis for cache debugging requires knowledge about the runtime stack of Drupal.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-with-caching-in-drupal-7&quot;&gt;The Problem with Caching in Drupal 7&lt;/h2&gt;
&lt;p&gt;To obtain performance in Drupal 7, Drupal relies heavily on caching. That is, to process something and cache the end result so that same work doesn’t need to be repeated. Conditions also have to be created for when that cache expires or is invalidated.
Drupal has a caching layer to help with this. When you want to store something in cache, you use &lt;a href=&quot;https://api.drupal.org/api/drupal/includes%21cache.inc/function/cache_set/7&quot;&gt;cache_set&lt;/a&gt;, to retrieve it, you use &lt;a href=&quot;https://api.drupal.org/api/drupal/includes%21cache.inc/function/cache_get/7&quot;&gt;cache_get&lt;/a&gt; and to wipe the cache bin clean, you can use &lt;a href=&quot;https://api.drupal.org/api/drupal/includes%21cache.inc/function/cache_clear_all/7&quot;&gt;cache_clear_all&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Often, modules can implicitly clear or set cache unintentionally. This can lead to more caching overhead than you need. For example, theme registry clearing, use of the variable_set function or calls to other modules that call cache_clear_all. The problem is, how do you track down culprits to fix the issue?&lt;/p&gt;

&lt;h2 id=&quot;enter-cache-debug&quot;&gt;Enter Cache Debug&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.drupal.org/project/cache_debug&quot;&gt;Cache Debug&lt;/a&gt; is a module that wraps around the caching layer and adds logging. Including stacktrace information. It means when a cache_set or cache_clear_all is called, you can trace back to what called it - understand the problem and fix it. Very quickly.&lt;/p&gt;

&lt;p&gt;It comes with three logging options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;watchdog&lt;/strong&gt; - good if you’re using syslog module but deadly if you’re using dblog.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;error_log&lt;/strong&gt; - logs to your php error log&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;arbitrary file&lt;/strong&gt; - specify your own log file to log to&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;configuring-cache-debug&quot;&gt;Configuring Cache Debug&lt;/h2&gt;
&lt;p&gt;Because the caching system is so highly utilized, cache logging can be incredibly verbose. Perhaps this is why there is no logging around this in Drupal core. Fortunately, Cache Debug is highly configurable to control what to log.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Because the caching system is loaded and used before Drupal’s variable system which manages configuration, it is best to set configuration in settings.php rather than in the database. However, there is a web UI that does set configuration in the database for ease of use.&lt;/p&gt;

&lt;h3 id=&quot;basic-configuration&quot;&gt;Basic configuration&lt;/h3&gt;
&lt;p&gt;If you’ve used the memcache module before, this should feel familiar. In order to use Cache Debug, you need to set it as the cache handler:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_backends&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;sites/all/modules/cache_debug/cache_debug.inc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_default_class&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;DrupalDebugCache&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This tells Drupal that there is a cache backend located in the path provided (make sure its correct for your Drupal site!) and that the default class for all cache bins is the DrupalDebugCache class. If you only want to monitor a single bin you may want to omit this option.&lt;/p&gt;

&lt;p&gt;Since Cache Debug is a logger and not an actual caching system, it needs to pass cache requests onto a real cache system. By default, Debug Cache will use Drupal core’s Database Cache system for cache storage, but if you’re using memcache, redis or similar, you may want to set that as the handler for Cache Debug:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_debug_class&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;MemCacheDrupal&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_cache_debug_form&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;DrupalDatabaseCache&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You need to also configure those modules accordingly.&lt;/p&gt;

&lt;p&gt;At this point, you’ll be logging all cache calls and stack traces to set and clear calls to the php error log.&lt;/p&gt;

&lt;h3 id=&quot;configure-the-logging-location&quot;&gt;Configure the logging location&lt;/h3&gt;

&lt;p&gt;You may want to choose your own logging location. For example, if you use dblog, then you won’t want to log to watchdog because it will bloat your database. Likewise, if you don’t want to bloat  our php error log, then you may want to log to an arbitrary file. You can choose your logging location by setting &lt;code&gt;cache_debug_logging_destination&lt;/code&gt; to error_log (default), watchdog or file. For file you will also need to provide the location:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_debug_logging_destination&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_debug_log_filepath&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/tmp/cachedebug.log&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;configuring-logging-options&quot;&gt;Configuring logging options&lt;/h3&gt;

&lt;p&gt;You can choose to log calls to cache get, getMulti, set and clear. You can also choose to log a stacktrace of these calls to show the stack that triggered the call. This is most useful for calls to SET and CLEAR. For a minimal logging option with the most about of insight, you might want to try this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_debug_log_get&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_debug_log_getMulti&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_debug_log_set&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_debug_log_clear&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_debug_stacktrace_set&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_debug_stacktrace_clear&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;logging-per-cache-bin&quot;&gt;Logging per cache bin&lt;/h3&gt;

&lt;p&gt;You don’t have to log the entire caching layer if you know which bin to look at for the caching issue you’re observing. For example, if you’re looking for misuse of variable_set, you only need to log the cache_bootstrap bin. In which case you could do this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Do not log to all cache bins so ensure this line is removed (from above):&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# $conf[&amp;#39;cache_default_class&amp;#39;] = &amp;#39;DrupalDebugCache&amp;#39;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_bootstrap_class&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;DrupalDebugCache&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;configure-for-common-issues&quot;&gt;Configure for common issues&lt;/h3&gt;
&lt;p&gt;Variable set calls and theme registry rebuilds are the two most common issues and so Cache Debug has use cases for these issues built in. So long as Cache Debug is the cache handler for the bin, you can turn off logging and turn on these features and Cache Debug will only log when these issues occur:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_default_class&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;DrupalDebugCache&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_debug_common_settings&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;variables&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;theme_registry&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Turn off logging&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_debug_log_get&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_debug_log_getMulti&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_debug_log_set&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cache_debug_log_clear&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;analysing-the-logged-data&quot;&gt;Analysing the logged data&lt;/h2&gt;

&lt;p&gt;Cache debug logs to a log file like the example below:
&lt;img src=&quot;http://www.pixelite.co.nz/img/cache-debug/cache_debug-example.png&quot; alt=&quot;Example output of cache debug logging&quot; class=&quot;img-responsive img-thumbnail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this snapshot of log output you can see both how cache debug logs cache calls and the stacktracing in action.&lt;/p&gt;

&lt;h3 id=&quot;log-format-structure&quot;&gt;Log format structure&lt;/h3&gt;
&lt;p&gt;A log line starts with a value that describes the cache bin, the cache command and the cache id. E.g. &lt;code&gt;cache_bootstrap-&amp;gt;set-&amp;gt;variables&lt;/code&gt; would bet a cache_set call to the cache_bootstrap cache bin to set the variables cache key.
Some calls also log additional data, for example, cache clear also indicates if the call was a wildcard clear. Set calls also log how much data (length) was set.&lt;/p&gt;

&lt;h3 id=&quot;stack-trace-logs&quot;&gt;Stack trace logs&lt;/h3&gt;
&lt;p&gt;When stack tracing is enabled for specific commands, a stack trace will be logged immediately after the log event that triggered it. The trace rolls back through each function that led to the current cache command being triggered. In the example above you can see that cache_clear_all was called by drupal_theme_rebuild which was called by an include from phptemplate_init. If you look at the source code in phptemplate_init, you’ll see that this means a cache rebuild was triggered from including template.php. In this case it was that Zen base theme had the theme registry rebuild left on.&lt;/p&gt;
</description>
        <creativeCommons:license>http://creativecommons.org/licenses/by-nc/4.0/</creativeCommons:license>
        <pubDate>Wed, 01 Jul 2015 00:00:00 +1200</pubDate>
        <link>http://www.pixelite.co.nz/article/debugging-drupal-performance-with-cache-debug/</link>
        <guid isPermaLink="true">http://www.pixelite.co.nz/article/debugging-drupal-performance-with-cache-debug/</guid>
        
        <category>drupal</category>
        
        <category>drupalplanet</category>
        
        <category>php</category>
        
        <category>cache</category>
        
        <category>performance</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>How to profile PHP memory with Drupal</title>
        <description>&lt;h2 id=&quot;why-is-this-important&quot;&gt;Why is this important&lt;/h2&gt;

&lt;p&gt;How to size the PHP setting &lt;code&gt;max_memory&lt;/code&gt; is actually really important for the health of your Drupal application. Size this too small, and you risk getting PHP fatals due to not enough memory allocated. Size this too large, and you are essentially under-utilising your hardware, which in turn can lead to more cost.&lt;/p&gt;

&lt;h2 id=&quot;how-to-record-every-drupal-requests-php-max-memory-usage&quot;&gt;How to record every Drupal requests PHP max memory usage&lt;/h2&gt;

&lt;p&gt;Tim Hillard created this really nice module called &lt;a href=&quot;https://www.drupal.org/project/memory_profiler&quot;&gt;Memory profiler&lt;/a&gt;, which probably wins some sort of award for being around one of the smallest modules on drupal.org. Essentially this module registers a &lt;a href=&quot;https://api.drupal.org/api/drupal/includes%21bootstrap.inc/function/drupal_register_shutdown_function/7&quot;&gt;shutdown function&lt;/a&gt; that gets called at the end of every normal Drupal request.&lt;/p&gt;

&lt;p&gt;The module is lightweight enough to run on production and only produces an extra syslog line per request.&lt;/p&gt;

&lt;h2 id=&quot;analyse-the-data&quot;&gt;Analyse the data&lt;/h2&gt;

&lt;p&gt;The data for memory profiler flows into watchdog, so if you run syslog (which you should), you can use CLI tools to analyse the data.&lt;/p&gt;

&lt;h3 id=&quot;what-does-a-single-request-look-like&quot;&gt;What does a single request look like&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;memory profiler&amp;quot;&lt;/span&gt; drupal-watchdog.log &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; head -n 1

May &lt;span class=&quot;m&quot;&gt;26&lt;/span&gt; 06:25:21 10.212.4.16 sitename: https://www.sitename.com&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;1432621521&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;memory profiler&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;1.152.97.17&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;https://www.sitename.com/&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;https://www.sitename.com/home&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;4.75 MB - home &lt;span class=&quot;nv&quot;&gt;request_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;v-fc9573dc-036f-11e5-a8c0-22000af91462&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This comes from your syslog format (which can be changed on a per site basis):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;drush vget syslog_format

syslog_format: &lt;span class=&quot;s1&quot;&gt;&amp;#39;!base_url|!timestamp|!type|!ip|!request_uri|!referer|!uid|!link|!message&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;extract-the-data-from-syslog&quot;&gt;Extract the data from syslog&lt;/h3&gt;

&lt;p&gt;From here you can tokenise the parts you actually care about, in other words the:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;URL requested (part 5)&lt;/li&gt;
  &lt;li&gt;PHP max memory (part 9)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using more bash foo&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;memory profiler&amp;quot;&lt;/span&gt; drupal-watchdog.log &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; head -n &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk -F&lt;span class=&quot;s1&quot;&gt;&amp;#39;|&amp;#39;&lt;/span&gt; -v &lt;span class=&quot;nv&quot;&gt;OFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $5, $9}&amp;#39;&lt;/span&gt;

https://www.sitename.com/,4.75 MB - home &lt;span class=&quot;nv&quot;&gt;request_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;v-fc9573dc-036f-11e5-a8c0-22000af91462&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On Acquia Cloud a request ID is added to all requests, we don’t need this. Also having the string ‘MB’ there is superfluous.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;memory profiler&amp;quot;&lt;/span&gt; drupal-watchdog.log &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; head -n &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk -F&lt;span class=&quot;s1&quot;&gt;&amp;#39;|&amp;#39;&lt;/span&gt; -v &lt;span class=&quot;nv&quot;&gt;OFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $5, $9}&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/ MB.*//&amp;#39;&lt;/span&gt;

https://www.sitename.com/,4.75&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Perfect.&lt;/p&gt;

&lt;p&gt;So in order to create a CSV for analysing in a spreadsheet you could do:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;request_uri,max_memory&amp;quot;&lt;/span&gt; &amp;gt; /tmp/memory.csv &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;memory profiler&amp;quot;&lt;/span&gt; drupal-watchdog.log &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk -F&lt;span class=&quot;s1&quot;&gt;&amp;#39;|&amp;#39;&lt;/span&gt; -v &lt;span class=&quot;nv&quot;&gt;OFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $5, $9}&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/ MB.*//&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /tmp/memory.csv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then you can make pretty graphs if you want:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.pixelite.co.nz/img/profile/graph.png&quot; alt=&quot;Graph showing PHP memory usage sorted by smallest to largest&quot; class=&quot;img-responsive img-thumbnail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or if you just want to find the top requests to your application by memory you can do&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;memory profiler&amp;quot;&lt;/span&gt; drupal-watchdog.log &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk -F&lt;span class=&quot;s1&quot;&gt;&amp;#39;|&amp;#39;&lt;/span&gt; -v &lt;span class=&quot;nv&quot;&gt;OFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $5, $9}&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/ MB.*//&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort -t, -k+2 -n -r &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; head -n 20&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Based on your findings in the logs, you should be able to come up with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A better understanding of your request memory profile&lt;/li&gt;
  &lt;li&gt;Better max memory settings for your Drupal application&lt;/li&gt;
  &lt;li&gt;Potentially identify poor performing pages (memory wise) and can look to optimise them&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gotchas&quot;&gt;Gotchas&lt;/h2&gt;

&lt;p&gt;This module will only work if:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;hook_boot()&lt;/code&gt; is called (which might not be the case if you run custom lightweight PHP scripts that do not bootstrap Drupal)&lt;/li&gt;
  &lt;li&gt;The Drupal request is not terminated with a SIGTERM or SIGKILL signal&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;p&gt;Let me know if you found this helpful, or if you have any changes to my bash foo. If you have profiled your Drupal application recently, what methods and tools did you use?&lt;/p&gt;
</description>
        <creativeCommons:license>http://creativecommons.org/licenses/by-nc/4.0/</creativeCommons:license>
        <pubDate>Wed, 27 May 2015 00:00:00 +1200</pubDate>
        <link>http://www.pixelite.co.nz/article/how-to-profile-php-memory-with-drupal/</link>
        <guid isPermaLink="true">http://www.pixelite.co.nz/article/how-to-profile-php-memory-with-drupal/</guid>
        
        <category>drupal</category>
        
        <category>drupalplanet</category>
        
        <category>php</category>
        
        <category>memory</category>
        
        <category>performance</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Top 10 DrupalCon LA sessions</title>
        <description>&lt;h2 id=&quot;drupalcon-la&quot;&gt;DrupalCon LA&lt;/h2&gt;

&lt;p&gt;So I did not make it along to DrupalCon Los Angeles, but I did spend some time reading twitter, and watching the sessions online. Here are some of the sessions I found entertaining and insightful and would recommend to others.&lt;/p&gt;

&lt;h2 id=&quot;driesnote-keynote&quot;&gt;Driesnote Keynote&lt;/h2&gt;

&lt;p&gt;Dries, as always, sets the lay of the land with Drupal. He also goes into the early days of Drupal, and how some key people he was involved with and have now gone on to form organisations that centre around Drupal.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Best quote:&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Obstacles don’t block the path, they are the path&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;embed-responsive embed-responsive-16by9&quot;&gt;
&lt;iframe width=&quot;1280&quot; height=&quot;720&quot; src=&quot;https://www.youtube.com/embed/uNRtZDAS0xI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;no&quot;&gt;No&lt;/h2&gt;

&lt;p&gt;Larry Garfield gives an interesting talk on why sometimes it is best to say NO in order to give focus to the things that actually matter.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Best quote:&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Case and point, the new Macbook Airs, they say NO TO EVERYTHING.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;embed-responsive embed-responsive-4by3&quot;&gt;
&lt;iframe width=&quot;960&quot; height=&quot;720&quot; src=&quot;https://www.youtube.com/embed/eXYs09gxIzE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;php-containers-at-scale-5k-containers-per-server&quot;&gt;PHP Containers at Scale: 5K Containers per Server&lt;/h2&gt;

&lt;p&gt;David Strauss explains the history of web hosting, and how this is now far more complex. David is CTO of &lt;a href=&quot;https://pantheon.io/&quot;&gt;Pantheon&lt;/a&gt;, and they now run 100,000+ websites, all with dev + test + production environments. Pantheon run 150+ containers on a 30GB box (205MB each on average). Really interesting talk on how to run large amounts of sites efficiently.&lt;/p&gt;

&lt;div class=&quot;embed-responsive embed-responsive-4by3&quot;&gt;
&lt;iframe width=&quot;960&quot; height=&quot;720&quot; src=&quot;https://www.youtube.com/embed/hFqEsqRFB9s&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;decoupled-drupal-when-why-and-how&quot;&gt;Decoupled Drupal: When, Why, and How&lt;/h2&gt;

&lt;p&gt;Amitai Burstein and Josh Koenig give a really entertaining presentation on monolithical architectures and some developer frustrations. And then introduce REST web services in Drupal 8, and how this can be used to provide better consumer interfaces for other frameworks.&lt;/p&gt;

&lt;div class=&quot;embed-responsive embed-responsive-4by3&quot;&gt;
&lt;iframe width=&quot;960&quot; height=&quot;720&quot; src=&quot;https://www.youtube.com/embed/CSrWpXe4nzw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;features-for-drupal-8&quot;&gt;Features for Drupal 8&lt;/h2&gt;

&lt;p&gt;Mike Potter goes through what role features played in Drupal 7, and how features will adapt in Drupal 8 now that CMI is in. Features in Drupal 8 will be going back to it’s roots and provide ‘bundles’ of configuration for re-use.&lt;/p&gt;

&lt;div class=&quot;embed-responsive embed-responsive-4by3&quot;&gt;
&lt;iframe width=&quot;960&quot; height=&quot;720&quot; src=&quot;https://www.youtube.com/embed/-91v3QvMkc0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;meet-commerce-2x&quot;&gt;Meet Commerce 2.x&lt;/h2&gt;

&lt;p&gt;Ryan and Bojan go through 1.x on Drupal 7, and how they have chosen to develop Commerce 2.x on Drupal 8. This is a complete rewrite. The hierarchical product model is really exciting.&lt;/p&gt;

&lt;div class=&quot;embed-responsive embed-responsive-4by3&quot;&gt;
&lt;iframe width=&quot;960&quot; height=&quot;720&quot; src=&quot;https://www.youtube.com/embed/I65tHQtJSJY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;how-when-and-why-to-patch-a-module&quot;&gt;How, When and Why to Patch a Module&lt;/h2&gt;

&lt;p&gt;Joshua Turton goes over what a patch is, when you should patch contributed modules, and how to keep track of these with Drush make.&lt;/p&gt;

&lt;div class=&quot;embed-responsive embed-responsive-4by3&quot;&gt;
&lt;iframe width=&quot;960&quot; height=&quot;720&quot; src=&quot;https://www.youtube.com/embed/rsNEF_JZ-2o&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;My colleague Josh also wrote a blog post on &lt;a href=&quot;https://www.acquia.com/blog/patching-drush-make&quot;&gt;how to use Drush make&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ci-for-css-creating-a-visual-regression-testing-workflow&quot;&gt;CI for CSS: Creating a Visual Regression Testing Workflow&lt;/h2&gt;

&lt;p&gt;I topic that I am passionate about is visual regressions, here Kate Kligman goes through some tools that can help you test your site for visual changes. Tools covered include PhantomJS, SlimerJS, Selenium, &lt;a href=&quot;https://github.com/BBC-News/wraith&quot;&gt;Wraith&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;embed-responsive embed-responsive-4by3&quot;&gt;
&lt;iframe width=&quot;960&quot; height=&quot;720&quot; src=&quot;https://www.youtube.com/embed/D63FWeYhISU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;speeding-up-drupal-8-development-using-drupal-console&quot;&gt;Speeding up Drupal 8 development using Drupal Console&lt;/h2&gt;

&lt;p&gt;Eduardo and Jesus give us an introduction to your new best friend in Drupal 8. Drupal console is a Symfony CLI application to help you write boilerplate code, e.g. to create a new module. Personally, I am excited for the form API generator, and the ability to create a new entity with a single command.&lt;/p&gt;

&lt;div class=&quot;embed-responsive embed-responsive-4by3&quot;&gt;
&lt;iframe width=&quot;960&quot; height=&quot;720&quot; src=&quot;https://www.youtube.com/embed/8Eu43RXKHmw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;For more information see &lt;a href=&quot;http://drupalconsole.com/&quot;&gt;drupalconsole.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;qa-with-dries&quot;&gt;Q&amp;amp;A with Dries&lt;/h2&gt;

&lt;p&gt;As Drupal heads down from 130 critical issues down to &lt;a href=&quot;https://www.drupal.org/project/issues/search/drupal?project_issue_followers=&amp;amp;status%5B%5D=1&amp;amp;status%5B%5D=13&amp;amp;status%5B%5D=8&amp;amp;status%5B%5D=14&amp;amp;status%5B%5D=15&amp;amp;status%5B%5D=4&amp;amp;status%5B%5D=16&amp;amp;priorities%5B%5D=400&amp;amp;version%5B%5D=8.x&amp;amp;issue_tags_op=%3D&quot;&gt;22&lt;/a&gt; currently, what are some key concerns by people. The questions are answered by dries, xjm, webchick and alexpott.&lt;/p&gt;

&lt;div class=&quot;embed-responsive embed-responsive-4by3&quot;&gt;
&lt;iframe width=&quot;960&quot; height=&quot;720&quot; src=&quot;https://www.youtube.com/embed/nAzQpbdZGGI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;where-can-i-find-more-videos&quot;&gt;Where can I find more videos&lt;/h2&gt;

&lt;p&gt;Don’t worry there are plenty more videos on the &lt;a href=&quot;https://www.youtube.com/user/DrupalAssociation/videos&quot;&gt;Drupal Association Youtube page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;p&gt;If you have any awesome sessions that I have missed let me know in the comments.&lt;/p&gt;
</description>
        <creativeCommons:license>http://creativecommons.org/licenses/by-nc/4.0/</creativeCommons:license>
        <pubDate>Fri, 22 May 2015 00:00:00 +1200</pubDate>
        <link>http://www.pixelite.co.nz/article/top-10-drupalcon-la-sessions/</link>
        <guid isPermaLink="true">http://www.pixelite.co.nz/article/top-10-drupalcon-la-sessions/</guid>
        
        <category>drupal</category>
        
        <category>drupalplanet</category>
        
        <category>drupalcon</category>
        
        <category>bestof</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Drupal Migrate D2D :: Taxonomy terms on nodes</title>
        <description>&lt;p&gt;A migration project I am currently working on hit a small hurdle with taxonomy terms on a content type. This took too long to resolve. Hopefully posting this here will save others the time and hassle I went though.&lt;/p&gt;

&lt;h2 id=&quot;migrate-d2d&quot;&gt;Migrate D2D&lt;/h2&gt;
&lt;p&gt;I am going to assume that if you are reading this you are already using the &lt;a href=&quot;https://www.drupal.org/project/migrate_d2d&quot;&gt;migrate_d2d&lt;/a&gt; module so I won’t go into the big explanation about what it is, why you should use it and just how greatful we all should be to &lt;a href=&quot;https://www.drupal.org/u/mikeryan&quot;&gt;Mike Ryan&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;node-migration-and-taxonomies&quot;&gt;Node migration and taxonomies&lt;/h2&gt;
&lt;p&gt;After following the docs I found that my taxonomy field was not being populated. A little digging led me to the conclusion that this was not something d2d handled out of the box and it was something I would have to deal with myself. There are a number of moving parts involved with this and due to all of these I can understand &lt;em&gt;why&lt;/em&gt; it is not something migrate d2d could do.&lt;/p&gt;

&lt;h3 id=&quot;public-function-prepareentity-row&quot;&gt;public function prepare($entity, $row)&lt;/h3&gt;
&lt;p&gt;The magic happens here.  The &lt;code&gt;prepare()&lt;/code&gt; function is the final thing to be called before the node object is saved. This is where we get to do any final tweaks or tidyups. You can find full detail on this in the &lt;a href=&quot;https://www.drupal.org/node/1132582&quot;&gt;Commonly implemented Migration methods&lt;/a&gt; page in the &lt;a href=&quot;https://www.drupal.org/migrate&quot;&gt;Migrate handbook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;prepare()&lt;/code&gt; function the &lt;code&gt;$entity&lt;/code&gt; is the new object that we are about to save and the &lt;code&gt;$row&lt;/code&gt; is our source object. At this point the taxonomy has been added to the &lt;code&gt;$row&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Within the &lt;code&gt;$row&lt;/code&gt; object the taxonomy has been added with its vid as the root level attribute. If you don’t know to watch for that it can catch you. Added to that it is the vid of the destination vocabulary that is used which caught me off guard. The situation I had did not have me migrating the vobacularies, just the terms within them and the vid for the Categories vocab was not the same on my development environment as it was on my staging environment. This caught me out initially as I don’t have direct access to the staging database to examine the content of tables.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;http://www.pixelite.co.nz/img/migrate-d2d/row_object_krumo.png&quot; alt=&quot;Krumo output of $row.&quot; class=&quot;img-responsive img-thumbnail&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;source $row-&amp;gt;{destination vid} = array({source tid}, {source tid}, {source tid})&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Once it was realised that the vid was from the destination vocabulary things got easier.  This is how the code looked in the end for me;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The node&amp;#39;s terms are in an array under their destination vocab ID and&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// this is different from environment to environment. However, we&amp;#39;ve only&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// got one taxonomy...&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;array_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$keys&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;is_numeric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$cat_vid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cat_vid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cat_vid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// We want the tid of the term we have migrated. This lets us look it up&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// our migrate_map table.&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$new_tid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;migrate_map_tncategoryterms&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;destid1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sourceid1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fetchField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;field_category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LANGUAGE_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;tid&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$new_tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;caveats&quot;&gt;Caveats&lt;/h3&gt;
&lt;p&gt;This worked for me because I only had &lt;strong&gt;one&lt;/strong&gt; taxonomy field to worry about. The moment you get more than one you will want to revisit the assignment of $new_tid to the appropriate field. This shouldn’t be a problem to hand code and if you have migrated the vocabularies too you may be able to use the migrate_map table to make something more dynamic.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;p&gt;If you have (or are currently) using migrate I would be interested to hear how you found it. Especially if you are migrating terms, but not the vocabulary.&lt;/p&gt;

</description>
        <creativeCommons:license>http://creativecommons.org/licenses/by-nc/4.0/</creativeCommons:license>
        <pubDate>Thu, 14 May 2015 00:00:00 +1200</pubDate>
        <link>http://www.pixelite.co.nz/article/migrate-d2d-taxonomy-terms-on-nodes/</link>
        <guid isPermaLink="true">http://www.pixelite.co.nz/article/migrate-d2d-taxonomy-terms-on-nodes/</guid>
        
        <category>drupal</category>
        
        <category>drupalplanet</category>
        
        <category>migrate</category>
        
        <category>migrated2d</category>
        
        
        <category>migration</category>
        
      </item>
    
      <item>
        <title>How and why you should update PHP to PHP 5.5 with Drupal</title>
        <description>&lt;p&gt;This post is a follow up to my previous blog post on &lt;a href=&quot;/article/upgrading-php-54-ubuntu-1204-lts-support-drupal-8&quot;&gt;how to upgrade PHP to 5.4 to support Drupal 8&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-you-should-upgrade-php&quot;&gt;Why you should upgrade PHP&lt;/h2&gt;

&lt;p&gt;If you are looking for reasons to ditch PHP 5.3, here are some:&lt;/p&gt;

&lt;h3 id=&quot;security&quot;&gt;Security&lt;/h3&gt;

&lt;p&gt;PHP 5.3 &lt;a href=&quot;http://php.net/supported-versions.php&quot;&gt;reached end of life in August 2014&lt;/a&gt;, this means that if you are running this version, you are running an insecure version of PHP that potentially has security holes in it. This is bad for obvious reasons.&lt;/p&gt;

&lt;h3 id=&quot;bundled-opcode-cache&quot;&gt;Bundled opcode cache&lt;/h3&gt;

&lt;p&gt;PHP 5.5 is the first version that bundles an opcode cache with PHP, this means there is also no need to also run APC (unless you need userland caching in &lt;a href=&quot;https://github.com/krakjoe/apcu&quot;&gt;APCu&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;

&lt;p&gt;PHP &lt;a href=&quot;http://news.php.net/php.internals/57760&quot;&gt;profiled the 5.4 release compared to 5.3 for Drupal&lt;/a&gt;, and that found that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;7% more requests/second&lt;/li&gt;
  &lt;li&gt;50% PHP memory reduction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PHP 5.5 offers more performance again, and there is a section at the bottom of this article that goes through a real life scenario.&lt;/p&gt;

&lt;h3 id=&quot;cool-new-features&quot;&gt;Cool new features&lt;/h3&gt;

&lt;p&gt;Read through the list of new features, here are some neat things you are missing out on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/language.exceptions.php#language.exceptions.finally&quot;&gt;try/catch/finally&lt;/a&gt; is finally now in&lt;/li&gt;
  &lt;li&gt;Short array syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;$array = [&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &amp;quot;foo&amp;quot; =&amp;gt; &amp;quot;bar&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &amp;quot;bar&amp;quot; =&amp;gt; &amp;quot;foo&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Function array dereferencing&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;$secondElement = getArray()[1];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/language.oop5.traits.php&quot;&gt;Traits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And &lt;a href=&quot;http://php.net/manual/en/migration54.new-features.php&quot;&gt;many&lt;/a&gt; &lt;a href=&quot;http://php.net/manual/en/migration55.new-features.php&quot;&gt;others&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-to-upgrade-to-php-55&quot;&gt;How to upgrade to PHP 5.5&lt;/h2&gt;

&lt;p&gt;There are a number of ways to update your server to PHP 5.5.&lt;/p&gt;

&lt;h3 id=&quot;upgrade-to-ubuntu-trusty-tahr-1404&quot;&gt;Upgrade to Ubuntu Trusty Tahr 14.04&lt;/h3&gt;

&lt;p&gt;Ubuntu Trusty Tahr 14.04 (which is an LTS version), which comes bundled with &lt;a href=&quot;http://packages.ubuntu.com/trusty/php5-common&quot;&gt;PHP 5.5.9&lt;/a&gt;. This is probably the best solution if you are managing your own Ubuntu box.&lt;/p&gt;

&lt;h3 id=&quot;install-a-ppa-on-ubuntu-precise-1204&quot;&gt;Install a PPA on Ubuntu Precise 12.04&lt;/h3&gt;

&lt;p&gt;If you are running the older Ubuntu Precise 12.04, you can add a PPA&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo add-apt-repository ppa:ondrej/php5
sudo apt-get update
sudo apt-get install php5
php5 -v&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It would be worth considering a dist upgrade though, but this at least can buy you some time.&lt;/p&gt;

&lt;h3 id=&quot;acquia-cloud-ui&quot;&gt;Acquia Cloud UI&lt;/h3&gt;

&lt;p&gt;If you use &lt;a href=&quot;https://www.acquia.com/products-services/acquia-cloud&quot;&gt;Acquia Cloud&lt;/a&gt; for hosting there is a convenient PHP version selector in the UI.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.pixelite.co.nz/img/php55/cloud.png&quot; alt=&quot;Acquia Cloud UI allows site administrators to change the PHP version&quot; class=&quot;img-responsive img-thumbnail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More information can be found in the &lt;a href=&quot;https://docs.acquia.com/cloud/configure/environments/php#php-version&quot;&gt;documentation&lt;/a&gt;. Be aware, once you upgrade beyond PHP 5.3, you cannot downgrade, so ensure you test your code on a development server first ;)&lt;/p&gt;

&lt;h2 id=&quot;common-coding-issues&quot;&gt;Common coding issues&lt;/h2&gt;

&lt;p&gt;Although Drupal 7 core, and most popular contributed modules will already support PHP 5.5, it would pay to do a code audit on any custom code written to ensure you are not using things you should not be. Here are some links you should read:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/migration54.incompatible.php&quot;&gt;PHP 5.4 incompatible changes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://php.net/manual/en/migration55.incompatible.php&quot;&gt;PHP 5.5 incompatible changes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below are some of the most common issues I have found in sites:&lt;/p&gt;

&lt;h3 id=&quot;call-time-pass-by-reference&quot;&gt;Call time pass-by-reference&lt;/h3&gt;

&lt;p&gt;If you have this in your code, you will have a bad time, as this is now a PHP fatal.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;foo(&amp;amp;$a); // Bad times.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;only-variables-can-be-passed-by-reference&quot;&gt;Only variables can be passed by reference&lt;/h3&gt;

&lt;p&gt;This will cause PHP to throw notices.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;php -a
Interactive shell

php &amp;gt; ini_set&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;error_reporting&amp;#39;&lt;/span&gt;, E_ALL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
php &amp;gt; var_dump&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;reset&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;explode&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&amp;#39;Jim|Bob|Cat&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
PHP Strict Standards:  Only variables should be passed by reference in php shell code on line 1

Strict Standards: Only variables should be passed by reference in php shell code on line 1
string&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Jim&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where you will likely find this in Drupal in my experience is when manually rendering nodes:&lt;/p&gt;

&lt;p&gt;This code works in PHP 5.3, but will throw notices in PHP 5.5:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;$rendered = drupal_render(node_view(node_load(1), &amp;#39;teaser&amp;#39;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The fix is to simply use a temporary variable:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;$view = node_view(node_load(1), &amp;#39;teaser&amp;#39;);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;$rendered = drupal_render($view);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The reason being that &lt;code&gt;drupal_render()&lt;/code&gt; expects a variable to be passed in (as it is passed by reference).&lt;/p&gt;

&lt;h3 id=&quot;how-do-you-find-coding-issues&quot;&gt;How do you find coding issues&lt;/h3&gt;

&lt;p&gt;Enable the syslog module, and tail that in your development environment, hunt down and fix as many notices and warnings as possible. The more noisy your logs are, the harder it is to find actual issues in them. While you are at it, turn off the dblog module, this is only helpful if you do not have access to your syslog (as it is a performance issue to be continually writing to the database).&lt;/p&gt;

&lt;h2 id=&quot;real-world-performance-comparison&quot;&gt;Real world performance comparison&lt;/h2&gt;

&lt;p&gt;This was taken from a recent site that underwent a PHP 5.3 to 5.5 upgrade. Here are 2 New Relic overviews, taken with identical performance tests run against the same codebase. The first image is taken with PHP 5.3 running:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.pixelite.co.nz/img/php55/php53.png&quot; alt=&quot;Performance of Drupal on PHP 5.3 is not that flash&quot; class=&quot;img-responsive img-thumbnail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see PHP time is around 260ms of the request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.pixelite.co.nz/img/php55/php55.png&quot; alt=&quot;Performance of Drupal on PHP 5.5 is much better than 5.3&quot; class=&quot;img-responsive img-thumbnail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With an upgrade to PHP 5.5, the time spent in PHP drops to around 130ms. So this is around a a 50% reduction in PHP time. This not only makes your application faster, but also it means you can serve more traffic from the same hardware.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;p&gt;If you have gone through a recent PHP upgrade, I would be interested to hear how you found it, and what performance gains you managed to achieve.&lt;/p&gt;
</description>
        <creativeCommons:license>http://creativecommons.org/licenses/by-nc/4.0/</creativeCommons:license>
        <pubDate>Mon, 13 Apr 2015 00:00:00 +1200</pubDate>
        <link>http://www.pixelite.co.nz/article/how-why-you-should-update-php-to-55-with-drupal/</link>
        <guid isPermaLink="true">http://www.pixelite.co.nz/article/how-why-you-should-update-php-to-55-with-drupal/</guid>
        
        <category>drupal</category>
        
        <category>drupalplanet</category>
        
        <category>php</category>
        
        <category>performance</category>
        
        <category>security</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Using Behat for Behavioral Driven Development (BDD) in Drupal</title>
        <description>&lt;h2 id=&quot;what-is-bdd&quot;&gt;What is BDD&lt;/h2&gt;

&lt;p&gt;&lt;abbr title=&quot;Behavior Driven Development&quot;&gt;BDD&lt;/abbr&gt; allows you to write human readable stories that describe the behavior of your website. These stories are written from an end user’s perspective, and can then be tested against your application to see if they pass or fail. This allow you to define functionality easily and up front, and often make sense in an agile environment, or where you are making constant changes to your application and you want some sort of re-assurance it is working as intended (i.e. regression tests).&lt;/p&gt;

&lt;h2 id=&quot;behat-and-gherkin&quot;&gt;Behat and Gherkin&lt;/h2&gt;

&lt;p&gt;Behat is a tool that make BDD possible. The language that behat stories are written in is called Gherkin. Gherkin is a line-oriented language that uses indentation to define structure. The start of each line is usually a special keyword, these all mean something in Gherkin.&lt;/p&gt;

&lt;pre&gt;
&lt;strong&gt;Feature:&lt;/strong&gt; Some terse yet descriptive text of what is desired
  In order to realize a named business value
  As an explicit system actor
  I want to gain some beneficial outcome which furthers the goal

  &lt;strong&gt;Scenario:&lt;/strong&gt; Some determinable business situation
    &lt;strong&gt;Given&lt;/strong&gt; some precondition
      &lt;strong&gt;And&lt;/strong&gt; some other precondition
     &lt;strong&gt;When&lt;/strong&gt; some action by the actor
      &lt;strong&gt;And&lt;/strong&gt; some other action
      &lt;strong&gt;And&lt;/strong&gt; yet another action
     &lt;strong&gt;Then&lt;/strong&gt; some testable outcome is achieved
      &lt;strong&gt;And&lt;/strong&gt; something else we can check happens too

  &lt;strong&gt;Scenario:&lt;/strong&gt; A different situation
  ...
&lt;/pre&gt;

&lt;p&gt;A more concrete example, is the UNIX ls command. A stakeholder may say to you:&lt;/p&gt;

&lt;pre&gt;
&lt;strong&gt;Feature:&lt;/strong&gt; ls
  In order to see the directory structure
  As a UNIX user
  I need to be able to list the current directory&#39;s contents

  &lt;strong&gt;Scenario:&lt;/strong&gt; List 2 files in a directory
    &lt;strong&gt;Given&lt;/strong&gt; I am in a directory &quot;test&quot;
      &lt;strong&gt;And&lt;/strong&gt; I have a file named &quot;foo&quot;
      &lt;strong&gt;And&lt;/strong&gt; I have a file named &quot;bar&quot;
     &lt;strong&gt;When&lt;/strong&gt; I run &quot;ls&quot;
     &lt;strong&gt;Then&lt;/strong&gt; I should get:
       &quot;&quot;&quot;
       bar
       foo
       &quot;&quot;&quot;
&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&quot;http://behat.readthedocs.org/en/v2.5/guides/1.gherkin.html&quot;&gt;Gherkin documentation&lt;/a&gt; can be found online.&lt;/p&gt;

&lt;h3 id=&quot;phpunit-and-behat&quot;&gt;PHPUnit and behat&lt;/h3&gt;

&lt;p&gt;Because of their very different approaches to testing, PHPUnit and Behat actually complement each other very well. A growing number of enterprise-level PHP projects are using a combination of both to achieve the best-possible test coverage.&lt;/p&gt;

&lt;h2 id=&quot;key-things-to-keep-in-mind-when-writing-tests&quot;&gt;Key things to keep in mind when writing tests&lt;/h2&gt;

&lt;p&gt;To help write good behat tests, here are some good guidelines to keep in mind.&lt;/p&gt;

&lt;h3 id=&quot;focus-on-business-value&quot;&gt;Focus on business value&lt;/h3&gt;

&lt;p&gt;When defining features (or stories) ensure that you are focusing on delivering an item of value. If you only have a few tests for your application, ensure the features that give the most business value are created first.&lt;/p&gt;

&lt;h3 id=&quot;focus-on-the-user&quot;&gt;Focus on the user&lt;/h3&gt;

&lt;p&gt;A critical component of Gherkin style dictates that you speak with language that the target user can reasonably be expected to understand. This user-centric focus means that everyone will be drawn back from their domains of expertise to think about what the target user of the feature needs. There’s a wide variety of users, too. Features intended for a site visitor may differ from those intended for site administrators, editors, or moderators. As the user varies, it’s possible the language used in a scenario will vary as well.&lt;/p&gt;

&lt;h2 id=&quot;integration-with-drupal&quot;&gt;Integration with Drupal&lt;/h2&gt;

&lt;p&gt;So you have some BDD features written, and now you want to implement them. There is a Drupal module that will help with the creation of nodes, users, vocabularies and taxonomy terms.&lt;/p&gt;

&lt;p&gt;There are 3 drivers available in the &lt;a href=&quot;https://www.drupal.org/project/drupalextension&quot;&gt;drupal behat extension&lt;/a&gt;, all with different pros and cons:&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;http://www.pixelite.co.nz/img/behat/api.png&quot; alt=&quot;There are 3 different Drupal drivers within the drupalextension module&quot; class=&quot;img-responsive img-thumbnail&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;Table of driver comparisons taken from the &lt;a href=&quot;https://behat-drupal-extension.readthedocs.org/en/3.0/drivers.html&quot;&gt;documentation&lt;/a&gt;.&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The most fully featured driver is the Drupal API driver, it has the limitation that it must be run on the same server that the website is run on.&lt;/p&gt;

&lt;h2 id=&quot;continuous-integration&quot;&gt;Continuous integration&lt;/h2&gt;

&lt;p&gt;So now you have your Behat tests set up and running on your development environment, the next step is to automate the Behat tests so that they execute automatically on a dedicated testing server after a new commit is pushed. There are a number of ways to do this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Github and TravisCI&lt;/li&gt;
  &lt;li&gt;Jenkins and use git post-receive hooks (or &lt;a href=&quot;https://github.com/acquia/cloud-hooks&quot;&gt;Acquia cloud hooks&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;drupal-8-and-behat&quot;&gt;Drupal 8 and behat&lt;/h2&gt;

&lt;p&gt;There is an issue open at the moment that aims to get Drupal 8 core tested with behat https://www.drupal.org/node/2232271 - this aims to introduce a new module called ‘behat’ and build in JavaScript automated testing for Drupal (at the moment this is all manual).&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;There is a lot of information out in the Drupal community around Behat that I would encourage you to read and watch:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Konstantin (from Inviqa) at &lt;a href=&quot;https://amsterdam2014.drupal.org/session/doing-behaviour-driven-development-behat&quot;&gt;DrupalCon Amsterdam 2014&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Drupal.org did a Drupal 6 to Drupal 7 upgrade, and for that they invested a lot of time into creating a &lt;a href=&quot;https://www.drupal.org/project/doobie&quot;&gt;full test suite (called doobie)&lt;/a&gt;, and now the test suite is used to help spot regressions in the site&lt;/li&gt;
  &lt;li&gt;Large Scale Drupal (LSD) created a &lt;a href=&quot;http://drupalwatchdog.com/system/files/Behavior-Driven%20Development%20LSD%20Guide.pdf&quot;&gt;whitepaper on BDD with Behat and Drupal&lt;/a&gt; which is well worth the read&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acquia.com/blog/high-quality-php-benjamin-eberlei&quot;&gt;High Quality PHP by Benjamin Eberlei&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lullabot.com/blog/podcasts/drupalizeme-podcast/21-bdd-behat-and-drupal&quot;&gt;Drupalize me have a podcast on BDD and Drupal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://behat.readthedocs.org/en/v2.5/quick_intro.html&quot;&gt;Behat documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;p&gt;If you have any further information that can be added, feel free to let me know in the comments.&lt;/p&gt;
</description>
        <creativeCommons:license>http://creativecommons.org/licenses/by-nc/4.0/</creativeCommons:license>
        <pubDate>Sat, 14 Mar 2015 00:00:00 +1300</pubDate>
        <link>http://www.pixelite.co.nz/article/using-behat-for-behavioral-driven-development-bdd-in-drupal</link>
        <guid isPermaLink="true">http://www.pixelite.co.nz/article/using-behat-for-behavioral-driven-development-bdd-in-drupal</guid>
        
        <category>bdd</category>
        
        <category>drupal</category>
        
        <category>testing</category>
        
        <category>behat</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Extracting a file or a folder from a git repository with full git history</title>
        <description>&lt;p&gt;This problem I find comes up several times in your development career. Rather that performing a simple file copy and losing all git history, it is actually quite simple to extract the file or folder with full commit history.&lt;/p&gt;

&lt;h2 id=&quot;create-the-patch-file&quot;&gt;Create the patch file&lt;/h2&gt;

&lt;p&gt;This step creates a single file with all the commits that touch the file or folder. The commits are ordered correctly so they will apply perfectly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/repository/path
git log --pretty=email --patch-with-stat --reverse --full-index --binary -- path/to/file_or_folder &amp;gt; /tmp/patch
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;perform-any-path-replacements-as-needed&quot;&gt;Perform any path replacements as needed&lt;/h2&gt;

&lt;p&gt;Sometimes you want to alter the path in which your previous repository worked, before importing into your new repository, this can be done with sed (or vim, or any other editor). Note that with sed your must escape the forward slashes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sed -i -e &#39;s/deep\/path\/that\/you\/want\/shorter/short\/path/g&#39; /tmp/patch
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;apply-the-commits-to-the-new-repository&quot;&gt;Apply the commits to the new repository&lt;/h2&gt;

&lt;p&gt;For this step you will need to be in the root of another git repository, and from there you can apply the commits. This will apply fine as long as you do not have any files in the current repository with the same name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/another_repository/path
git am &amp;lt; /tmp/patch
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;p&gt;Let me know if this helped you, or you have any other git tricks that you have found along the way here.&lt;/p&gt;
</description>
        <creativeCommons:license>http://creativecommons.org/licenses/by-nc/4.0/</creativeCommons:license>
        <pubDate>Tue, 10 Mar 2015 00:00:00 +1300</pubDate>
        <link>http://www.pixelite.co.nz/article/extracting-file-folder-from-git-repository-with-full-git-history</link>
        <guid isPermaLink="true">http://www.pixelite.co.nz/article/extracting-file-folder-from-git-repository-with-full-git-history</guid>
        
        <category>git</category>
        
        <category>sed</category>
        
        <category>bash</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Site preview - the holy grail of Drupal</title>
        <description>&lt;h2 id=&quot;what-is-site-preview&quot;&gt;What is site preview&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The ability to see (and have selected others see) changes to content and layout that is not yet visible to the general public&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So recently I did a talk at &lt;a href=&quot;https://melbourne2015.drupal.org.au/session/site-preview-holy-grail-drupal&quot;&gt;DrupalSouth Melbourne&lt;/a&gt; on site preview solutions that exist within Drupal at present. I noticed that no one had managed to do a comparison between them as they stand at the moment, so I aimed to help out there.&lt;/p&gt;

&lt;p&gt;Solutions compared in the talk:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Drupal 7 (stock)&lt;/li&gt;
  &lt;li&gt;SPS&lt;/li&gt;
  &lt;li&gt;CPS&lt;/li&gt;
  &lt;li&gt;Zariz&lt;/li&gt;
  &lt;li&gt;Live preview&lt;/li&gt;
  &lt;li&gt;What is coming in Drupal 8&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also wanted to introduce the new solution that was developed for the Ministry of Health New Zealand, that aimed to solve site preview in an entirely different manner.&lt;/p&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;

&lt;p&gt;Here are my &lt;a href=&quot;http://bit.ly/drupalsouthsitepreview&quot;&gt;full slides&lt;/a&gt; from the talk if you want to read about the above options in more detail.&lt;/p&gt;

&lt;h2 id=&quot;how-preview-sync-is-different&quot;&gt;How preview sync is different&lt;/h2&gt;

&lt;p&gt;Instead of try to take over your production site, and pollute it with complex revisioning and access control, and altering your EFQ and views using magic, it instead works with your existing workflow (workbench_moderation integration is &lt;abbr title=&quot;out of the box&quot;&gt;OOTB&lt;/abbr&gt;), and aims to be a lightweight solution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.pixelite.co.nz/img/site-preview/diagram.png&quot; alt=&quot;Preview sync syndicates your production database to a separate preview environment&quot; class=&quot;img-responsive img-thumbnail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Preview sync, takes a live snapshot (optimised) of your production database, and imports this to a separate dedicated preview environment. Then a number of actions take place, all of which are entirely alterable, so you can add your own tasks in, and remove tasks you don’t need.&lt;/p&gt;

&lt;p&gt;Example tasks in preview sync:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;environment switch to preview, this allows you to enable and disable modules, perform actions (e.g. redirecting email to a log). This is a powerful hook.&lt;/li&gt;
  &lt;li&gt;publish the content currently in ‘Needs Review’, this allows your content approvers to see the content, including all surrounding content as if it was published on production, but in a safe and controlled environment&lt;/li&gt;
  &lt;li&gt;re-index solr, if your site is largely driven by Apache Solr (which is not uncommon), this will allow the newly published content above to be inserted into the preview Solr index. This is a unique feature&lt;/li&gt;
  &lt;li&gt;your task here, seriously, the task list is completely alterable, and any drush command can be remotely executed on the preview environment. Custom drush commands can be added. An example of which is the bundled workbench-moderation-publish drush command.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;security&quot;&gt;Security&lt;/h3&gt;

&lt;p&gt;As all the complex access control is not needed on production (e.g. you are never sending un-published content to Solr), there is a huge security benefit to using preview sync. Access control to nodes is kept simple on production.&lt;/p&gt;

&lt;p&gt;Also, as the preview environment is dedicated, you can lock down access, e.g. only allow access to your preview site from certain IPs. This way, your internal content approvers can still see the content, and no one else.&lt;/p&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;

&lt;p&gt;If preview sync sounds like it could be useful to you, I am keen to know - please leave a comment below. I am also keen to hear if&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;there is a missing feature that is needed for you to adopt preview sync&lt;/li&gt;
  &lt;li&gt;key integrations with other contributed modules are missing&lt;/li&gt;
&lt;/ul&gt;
</description>
        <creativeCommons:license>http://creativecommons.org/licenses/by-nc/4.0/</creativeCommons:license>
        <pubDate>Sat, 07 Mar 2015 00:00:00 +1300</pubDate>
        <link>http://www.pixelite.co.nz/article/site-preview-the-holy-grail-of-drupal</link>
        <guid isPermaLink="true">http://www.pixelite.co.nz/article/site-preview-the-holy-grail-of-drupal</guid>
        
        <category>drupal</category>
        
        <category>drupalplanet</category>
        
        <category>preview</category>
        
        <category>content-staging</category>
        
        
        <category>tutorial</category>
        
      </item>
    
  </channel>
</rss>
